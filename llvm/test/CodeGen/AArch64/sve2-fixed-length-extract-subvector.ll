; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=aarch64 -mattr=+sve2,+bf16 -verify-machineinstrs %s -o - | FileCheck %s

; This is a similar test to sve-fixed-length-extract-subvector.ll, but this one
; uses SVE2 and extracts multiple subvectors at once to ensure that the ext
; instruction is used (instead of just using smaller ld/st instructions with an
; offset).

; Test the patterns selecting EXT_ZZI and EXT_ZZI_B for fixed-length vectors
; when SVE2 is available.

;
; Use NEON for 128-bit vectors
;

define void @extract_v4i32_halves(ptr %in, ptr %out, ptr %out2) {
; CHECK-LABEL: extract_v4i32_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr q0, [x0]
; CHECK-NEXT:    ext v1.16b, v0.16b, v0.16b, #8
; CHECK-NEXT:    str d1, [x1]
; CHECK-NEXT:    str d0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <4 x i32>, ptr %in
  %hi = shufflevector <4 x i32> %b, <4 x i32> poison, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %hi, ptr %out
  %lo = shufflevector <4 x i32> %b, <4 x i32> poison, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %lo, ptr %out2
  ret void
}

define void @extract_v4i32_half_unaligned(ptr %in, ptr %out) {
; CHECK-LABEL: extract_v4i32_half_unaligned:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr q0, [x0]
; CHECK-NEXT:    ext v0.16b, v0.16b, v0.16b, #4
; CHECK-NEXT:    str d0, [x1]
; CHECK-NEXT:    ret
entry:
  %b = load <4 x i32>, ptr %in
  %d = shufflevector <4 x i32> %b, <4 x i32> poison, <2 x i32> <i32 1, i32 2>
  store <2 x i32> %d, ptr %out
  ret void
}

;
; Use SVE for 256-bit vectors
;

define void @extract_v4i64_halves(ptr %in, ptr %out, ptr %out2) vscale_range(2,2) {
; CHECK-LABEL: extract_v4i64_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #16
; CHECK-NEXT:    str q1, [x1]
; CHECK-NEXT:    str q0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <4 x i64>, ptr %in
  %hi = shufflevector <4 x i64> %b, <4 x i64> poison, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %hi, ptr %out
  %lo = shufflevector <4 x i64> %b, <4 x i64> poison, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %lo, ptr %out2
  ret void
}

define void @extract_v4double_halves(ptr %in, ptr %out, ptr %out2) vscale_range(2,2) {
; CHECK-LABEL: extract_v4double_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #16
; CHECK-NEXT:    str q1, [x1]
; CHECK-NEXT:    str q0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <4 x double>, ptr %in
  %hi = shufflevector <4 x double> %b, <4 x double> poison, <2 x i32> <i32 2, i32 3>
  store <2 x double> %hi, ptr %out
  %lo = shufflevector <4 x double> %b, <4 x double> poison, <2 x i32> <i32 0, i32 1>
  store <2 x double> %lo, ptr %out2
  ret void
}

define void @extract_v8i32_halves(ptr %in, ptr %out, ptr %out2) vscale_range(2,2) {
; CHECK-LABEL: extract_v8i32_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #16
; CHECK-NEXT:    str q1, [x1]
; CHECK-NEXT:    str q0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <8 x i32>, ptr %in
  %hi = shufflevector <8 x i32> %b, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i32> %hi, ptr %out
  %lo = shufflevector <8 x i32> %b, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %lo, ptr %out2
  ret void
}

; Note that both the vector.extract intrinsic and the shufflevector from
; the previous example get detected as a extract_subvector ISD node in
; SelectionDAG. We'll test both cases for v8i32 for the sake of completeness,
; but other types will just be tested using shufflevector.
define void @extract_v8i32_halves_intrinsic(ptr %in, ptr %out, ptr %out2) vscale_range(2,2) {
; CHECK-LABEL: extract_v8i32_halves_intrinsic:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #16
; CHECK-NEXT:    str q1, [x1]
; CHECK-NEXT:    str q0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <8 x i32>, ptr %in
  %hi = call <4 x i32> @llvm.vector.extract.v4i32.v8i32(<8 x i32> %b, i64 4)
  store <4 x i32> %hi, ptr %out
  %lo = call <4 x i32> @llvm.vector.extract.v4i32.v8i32(<8 x i32> %b, i64 0)
  store <4 x i32> %lo, ptr %out2
  ret void
}

define void @extract_v8float_halves(ptr %in, ptr %out, ptr %out2) vscale_range(2,2) {
; CHECK-LABEL: extract_v8float_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #16
; CHECK-NEXT:    str q1, [x1]
; CHECK-NEXT:    str q0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <8 x float>, ptr %in
  %hi = shufflevector <8 x float> %b, <8 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x float> %hi, ptr %out
  %lo = shufflevector <8 x float> %b, <8 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x float> %lo, ptr %out2
  ret void
}

define void @extract_v8i32_half_unaligned(<8 x i32> %unused, ptr %in, ptr %out) vscale_range(2,2) {
; CHECK-LABEL: extract_v8i32_half_unaligned:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #16
; CHECK-NEXT:    ext v0.16b, v0.16b, v1.16b, #8
; CHECK-NEXT:    str q0, [x1]
; CHECK-NEXT:    ret
entry:
  %b = load <8 x i32>, ptr %in
  %d = shufflevector <8 x i32> %b, <8 x i32> poison, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  store <4 x i32> %d, ptr %out
  ret void
}

define void @extract_v8i32_quarters(ptr %in, ptr %out, ptr %out2, ptr %out3, ptr %out4) vscale_range(2,2) {
; CHECK-LABEL: extract_v8i32_quarters:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    mov z2.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #16
; CHECK-NEXT:    ext z2.b, z2.b, z0.b, #24
; CHECK-NEXT:    str d1, [x1]
; CHECK-NEXT:    str d2, [x2]
; CHECK-NEXT:    str d0, [x3]
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    str d0, [x4]
; CHECK-NEXT:    ret
entry:
  %b = load <8 x i32>, ptr %in
  %hilo = shufflevector <8 x i32> %b, <8 x i32> poison, <2 x i32> <i32 4, i32 5>
  store <2 x i32> %hilo, ptr %out
  %hihi = shufflevector <8 x i32> %b, <8 x i32> poison, <2 x i32> <i32 6, i32 7>
  store <2 x i32> %hihi, ptr %out2
  %lolo = shufflevector <8 x i32> %b, <8 x i32> poison, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %lolo, ptr %out3
  %lohi = shufflevector <8 x i32> %b, <8 x i32> poison, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %lohi, ptr %out4
  ret void
}

define void @extract_v16i16_halves(ptr %in, ptr %out, ptr %out2) vscale_range(2,2) {
; CHECK-LABEL: extract_v16i16_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #16
; CHECK-NEXT:    str q1, [x1]
; CHECK-NEXT:    str q0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <16 x i16>, ptr %in
  %hi = shufflevector <16 x i16> %b, <16 x i16> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i16> %hi, ptr %out
  %lo = shufflevector <16 x i16> %b, <16 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %lo, ptr %out2
  ret void
}

define void @extract_v16bfloat_halves(ptr %in, ptr %out, ptr %out2) vscale_range(2,2) {
; CHECK-LABEL: extract_v16bfloat_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    str q0, [x1]
; CHECK-NEXT:    str q1, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <16 x bfloat>, ptr %in
  %hi = shufflevector <16 x bfloat> %b, <16 x bfloat> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x bfloat> %hi, ptr %out
  %lo = shufflevector <16 x bfloat> %b, <16 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x bfloat> %lo, ptr %out2
  ret void
}

define void @extract_v16half_halves(ptr %in, ptr %out, ptr %out2) vscale_range(2,2) {
; CHECK-LABEL: extract_v16half_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #16
; CHECK-NEXT:    str q1, [x1]
; CHECK-NEXT:    str q0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <16 x half>, ptr %in
  %hi = shufflevector <16 x half> %b, <16 x half> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x half> %hi, ptr %out
  %lo = shufflevector <16 x half> %b, <16 x half> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x half> %lo, ptr %out2
  ret void
}

define void @extract_v32i8_halves(ptr %in, ptr %out, ptr %out2) vscale_range(2,2) {
; CHECK-LABEL: extract_v32i8_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #16
; CHECK-NEXT:    str q1, [x1]
; CHECK-NEXT:    str q0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <32 x i8>, ptr %in
  %hi = shufflevector <32 x i8> %b, <32 x i8> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  store <16 x i8> %hi, ptr %out
  %lo = shufflevector <32 x i8> %b, <32 x i8> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %lo, ptr %out2
  ret void
}

;
; Use SVE for 512-bit vectors
;

define void @extract_v8i64_halves(ptr %in, ptr %out, ptr %out2) vscale_range(4,4) {
; CHECK-LABEL: extract_v8i64_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #32
; CHECK-NEXT:    st1d { z1.d }, p0, [x1]
; CHECK-NEXT:    st1d { z0.d }, p0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <8 x i64>, ptr %in
  %hi = shufflevector <8 x i64> %b, <8 x i64> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i64> %hi, ptr %out
  %lo = shufflevector <8 x i64> %b, <8 x i64> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i64> %lo, ptr %out2
  ret void
}

define void @extract_v16i32_halves(ptr %in, ptr %out, ptr %out2) vscale_range(4,4) {
; CHECK-LABEL: extract_v16i32_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    ptrue p0.s, vl8
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #32
; CHECK-NEXT:    st1w { z1.s }, p0, [x1]
; CHECK-NEXT:    st1w { z0.s }, p0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <16 x i32>, ptr %in
  %hi = shufflevector <16 x i32> %b, <16 x i32> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %hi, ptr %out
  %lo = shufflevector <16 x i32> %b, <16 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i32> %lo, ptr %out2
  ret void
}

define void @extract_v32i16_halves(ptr %in, ptr %out, ptr %out2) vscale_range(4,4) {
; CHECK-LABEL: extract_v32i16_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    ptrue p0.h, vl16
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #32
; CHECK-NEXT:    st1h { z1.h }, p0, [x1]
; CHECK-NEXT:    st1h { z0.h }, p0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <32 x i16>, ptr %in
  %hi = shufflevector <32 x i16> %b, <32 x i16> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  store <16 x i16> %hi, ptr %out
  %lo = shufflevector <32 x i16> %b, <32 x i16> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i16> %lo, ptr %out2
  ret void
}


define void @extract_v64i8_halves(ptr %in, ptr %out, ptr %out2) vscale_range(4,4) {
; CHECK-LABEL: extract_v64i8_halves:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldr z0, [x0]
; CHECK-NEXT:    ptrue p0.b, vl32
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    ext z1.b, z1.b, z0.b, #32
; CHECK-NEXT:    st1b { z1.b }, p0, [x1]
; CHECK-NEXT:    st1b { z0.b }, p0, [x2]
; CHECK-NEXT:    ret
entry:
  %b = load <64 x i8>, ptr %in
  %hi = shufflevector <64 x i8> %b, <64 x i8> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  store <32 x i8> %hi, ptr %out
  %lo = shufflevector <64 x i8> %b, <64 x i8> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  store <32 x i8> %lo, ptr %out2
  ret void
}

declare <2 x i32> @llvm.vector.extract.v2i32.v4i32(<4 x i32>, i64)
declare <2 x i32> @llvm.vector.extract.v2i32.v8i32(<8 x i32>, i64)
declare <4 x i32> @llvm.vector.extract.v4i32.v8i32(<8 x i32>, i64)
